# -*- coding: utf-8 -*-
"""online_retail_store_pandas_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NkiLxnypLUEXbffID3M_w5Pv6NJrlW9S
"""

import numpy as np
import pandas as pd

"""## Step 1: Dataset Selection

##### We are going to use the "Online Retail Dataset" from the UCI Machine Learning Repository. This dataset contains transactional data for a UK-based online retail store, including details like customer IDs, products purchased, and transaction timestamps.

## Step 2: Data Cleaning and Preprocessing

#### Tasks:
- Load the dataset into a Pandas DataFrame.
- Handle missing values (e.g., customer IDs may be missing).
- Remove duplicate or irrelevant data (e.g., transactions with negative quantities).
- Format date columns into proper datetime objects.
"""

# Load the dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00352/Online%20Retail.xlsx"
df = pd.read_excel(url)

# Preview the data
print(df.head())

# Check for missing values

print(df.isnull().sum())

# Handling missing values

df = df.dropna(subset=['CustomerID'])
df

# Preview transactions with negative quantity

negative_transactions = df[df['Quantity'] < 0]
print(negative_transactions)

# Remove Transactions with negative quantities

df = df[df['Quantity'] > 0]

# Convert InvoiceDate to datetime

df.loc[:, 'InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])

# print summary of the cleaner dataset
print(df.info())

"""## Step 3: Exploratory Data Analysis (EDA)

#### Tasks:
- Perform descriptive statistics on numerical columns.
- Analyze the top-selling products and top customers.
- Identify trends in sales over time.
"""

# Descriptive statistics
print(df.describe())

# Top 5 best-selling products

top_products = df.groupby('Description')['Quantity'].sum().sort_values(ascending=False).head(5)
print('Top Products : \n', top_products)

# Top 5 customers by total spend

df['Total Price'] = df['Quantity']*df['UnitPrice']
top_customers = df.groupby('CustomerID')['Total Price'].sum().sort_values(ascending=False).head(5)

print('Top Customers : \n', top_customers)

# Sales trends over time
sales_trends = df.groupby(df['InvoiceDate'].dt.to_period('M'))['Total Price'].sum()
print('Monthly Sales Trends : \n', sales_trends)

"""## Step 4: Feature Engineering

- Add new features like "Day of Week", "Hour of Purchase", or customer segmentation.
"""

# Add new features

df['DayOfWeek'] = df['InvoiceDate'].dt.day_name()
df['Hour'] = df['InvoiceDate'].dt.hour

df

# Customer segmentation: Total spending per customer

customer_segments = df.groupby('CustomerID')['Total Price'].sum()
print(customer_segments)
customer_segments = pd.qcut(customer_segments, 4, labels=['Low', 'Medium', 'High', 'Very High'])
print(customer_segments.value_counts())

"""## Step 5: Insights and Reporting
#### Create visualizations:
- Use Matplotlib/Seaborn for bar charts, line graphs, and pie charts.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# plot top-selling products
top_products.plot(kind='bar', title='Top-Selling Products')
plt.ylabel('Quantity Sold')
plt.show()

# Plot monthly sales trends
sales_trends.plot(kind='line', title='Monthly Sales Trends')
plt.ylabel('Total Sales')
plt.show()



























